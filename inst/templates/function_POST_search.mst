#' @title
#' {{verb}} {{titleCall}}
#'
#' @description
#' {{summary}}
#'
#' @param con list; required: TRUE; BrAPI connection object
{{#parameters}}
#' @param {{pname}}
{{/parameters}}
#'
#' @details {{description}}
#'
#' @return data.frame
#'
#' @author Maikel Verouden
#'
#' @references \href{https://app.swaggerhub.com/apis/PlantBreedingAPI/{{package}}/{{version}}#/{{tag}}/{{verb}}_{{callRefURL}} }{BrAPI SwaggerHub}
#'
{{#family}}
#' @family {{fname}}
{{/family}}
#'
#' @examples
#' \dontrun{
#' con <- brapi_db()$testserver
#' con[["token"]] <- "YYYY"
#'
#' # Immediate Response Example
#' brapi_{{verb}}_{{name}}(con = con, )
#'
#' # Saved or Asynchronous Search Response Example
#' brapi_{{verb}}_{{name}}(con = con, )
#' }
#'
#' @export
brapi_{{verb}}_{{name}} <- function(con = NULL, {{arguments}}) {
  ## Create a list of used arguments
  usedArgs <- brapirv2:::brapi_usedArgs(origValues = FALSE)
  ## Check if BrAPI server can be reached given the connection details
  brapi_checkCon(con = usedArgs[["con"]], verbose = FALSE)
  ## Check validity of used and required arguments
  brapirv2:::brapi_checkArgs(usedArgs, reqArgs = "{{required}}")
  ## Obtain the call url
  callurl <- brapirv2:::brapi_POST_callURL(usedArgs = usedArgs,
                                           callPath = "{{call}}",
                                           reqArgs = "{{required}}",
                                           packageName = "{{package}}",
                                           callVersion = {{version}})
  ## Build the Body
  callbody <- brapirv2:::brapi_POST_callBody(usedArgs = usedArgs,
                                             reqArgs = "{{required}}")
  ## Adaptation for v2.0 where json body is wrapped in []
  callbody <- list(callbody)

  try({
    ## Make the call and receive the response
    resp <- brapirv2:::brapi_POST(url = callurl, body = callbody, usedArgs = usedArgs)
    ## Message about call status
    if (httr::status_code(resp) == 200) {
      message(paste0("Immediate Response.", "\n"))
    } else if (httr::status_code(resp) == 202) {
      message(paste0("Saved or Asynchronous Response has provided a searchResultsDbId.", "\n"))
      message(paste0("Use the GET {{titleCall}}/{searchResultsDbId} call to retrieve the paginated output.", "\n"))
    } else {
      stop(paste0("The POST {{titleCall}} call resulted in Server status, ", httr::http_status(resp)[["message"]]))
    }
    ## Extract the content from the response object in human readable form
    cont <- httr::content(x = resp, as = "text", encoding = "UTF-8")
    ## Convert the content object into a data.frame
    out <- brapirv2:::brapi_result2df(cont, usedArgs)
  })
  ## Set class of output
  class(out) <- c(class(out), "brapi_{{verb}}_{{name}}")
  ## Show pagination information from metadata
  brapirv2:::brapi_serverinfo_metadata(cont)
  return(out)
}
