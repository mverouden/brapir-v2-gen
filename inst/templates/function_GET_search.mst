#' @title
#' {{verb}} {{titleCall}}
#'
#' @description
#' {{summary}}
#'
#' @param con list; required: TRUE; BrAPI connection object
{{#parameters}}
#' @param {{pname}}
{{/parameters}}
#'
#' @details {{description}}
#'
#' @return data.frame
#'
#' @author Maikel Verouden
#'
#' @references \href{https://app.swaggerhub.com/apis/PlantBreedingAPI/{{package}}/{{version}}#/{{tag}}/{{verb}}_{{callRefURL}} }{BrAPI SwaggerHub}
#'
{{#family}}
#' @family {{fname}}
{{/family}}
#'
#' @examples
#' \dontrun{
#' con <- brapi_db()$testserver
#' con[["token"]] <- "YYYY"
#' # Saved or Asynchronous Search Response Example
#' out <-
#'  brapi_post_search_(con = con,
#'                     ,
#'                     ,
#'                     ,
#'                     ,
#'                     )
#' searchResultsDbId <- out$searchResultsDbId
#' brapi_{{verb}}_{{name}}(con = con, searchResultsDbId = searchResultsDbId)
#' }
#'
#' @export
brapi_{{verb}}_{{name}} <- function(con = NULL, {{arguments}}) {
  ## Create a list of used arguments
  usedArgs <- brapirv2:::brapi_usedArgs(origValues = FALSE)
  ## Check if BrAPI server can be reached given the connection details
  brapi_checkCon(con = usedArgs[["con"]], verbose = FALSE)
  ## Check validity of used and required arguments
  brapirv2:::brapi_checkArgs(usedArgs, reqArgs = "{{required}}")
  ## Obtain the call url
  callurl <- brapirv2:::brapi_GET_callURL(usedArgs = usedArgs,
                                          callPath = "{{call}}",
                                          reqArgs = "{{required}}",
                                          packageName = "{{package}}",
                                          callVersion = {{version}})

  try({
    ## Make the call and receive the response
    resp <- brapirv2:::brapi_GET(url = callurl, usedArgs = usedArgs)
    ## Check call status
    while (httr::status_code(resp) == 202) {
      Sys.sleep(5)
      resp <- brapirv2:::brapi_GET(url = callurl, usedArgs = usedArgs)
      status <- jsonlite::fromJSON(httr::content(x = resp,
                                                 as = "text",
                                                 encoding = "UTF-8"))[["metadata"]][["status"]]
      if (length(status) != 0) {
        brapirv2:::brapi_message(msg = paste0(status[["message"]], "\n"))
      }
    }
    if (httr::status_code(resp) == 200) {
      ## Extract the content from the response object in human readable form
      cont <- httr::content(x = resp, as = "text", encoding = "UTF-8")
      ## Convert the content object into a data.frame
      out <- brapirv2:::brapi_result2df(cont, usedArgs)
    }
  })
  ## Set class of output
  class(out) <- c(class(out), "brapi_{{verb}}_{{name}}")
  ## Show pagination information from metadata
  brapirv2:::brapi_serverinfo_metadata(cont)
  return(out)
}
